<a href="push" class="button"></a>

<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script type='text/javascript' src='/js/jquery.simplemodal-1.4.4.js'></script>
<link type='text/css' href='/css/modal.css' rel='stylesheet' media='screen' />

<style type='text/css'>
  ul { list-style: none; }
  #recordingslist audio { display: block; margin-bottom: 10px; }
  #please-wait-modal-content { display: none; }
</style>

<h1>Recorder.js simple WAV export example</h1>

<p>Make sure you are using a recent version of Google Chrome.</p>
<p>Also before you enable microphone input either plug in headphones or turn the volume down if you want to avoid ear splitting feedback!</p>

<button onclick="startRecording(this);">record</button>
<button onclick="stopRecording(this);" disabled>stop</button>

<div id="recordingslist"></div>
<button id="uploadButton" onclick="uploadAudio(this); disabled">upload</div>

<div id="please-wait-modal-content">
  Thanks! Please wait while your audio uploads (this may take up to a minute).
</div>

<script>
function __log(e, data) {
  console.log(e);
}

var audio_context;
var recorder;

function startUserMedia(stream) {
  var input = audio_context.createMediaStreamSource(stream);
  __log('Media stream created.');

  var zeroGain = audio_context.createGain();
  zeroGain.gain.value = 0;
  input.connect(zeroGain);
  zeroGain.connect(audio_context.destination);
  __log('Input connected to muted gain node connected to audio context destination.');

  recorder = new Recorder(input);
  __log('Recorder initialised.');
}

function startRecording(button) {
  recorder && recorder.record();
  button.disabled = true;
  button.nextElementSibling.disabled = false;
  __log('Recording...');
}

function stopRecording(button) {
  recorder && recorder.stop();
  button.disabled = true;
  button.previousElementSibling.disabled = true;
  uploadButton = document.getElementById("uploadButton");
  uploadButton.disabled = false;
  __log('Stopped recording.');

  createPlayer();

/*
*/

  //recorder.clear();
}

function uploadAudio(e) {
  $('#please-wait-modal-content').modal({
    overlayClose: true
  });
  recorder && recorder.exportWAV(function(blob) {
    console.log("sending data");
    console.log(blob);
    var fd = new FormData();
    fd.append('fname', 'myaudio.wav');
    fd.append('data', blob);
    $.ajax({
      type: "POST",
      url: "/saveblobtotmp",
      data: fd,
      processData: false,
      contentType: false
      }).done(function(response) {
        console.log(response);
        alert("all done!");
      });
  });
}

function createPlayer() {
  recorder && recorder.exportWAV(function(blob) {
    var url = URL.createObjectURL(blob);
    var au = document.createElement('audio');

    au.controls = true;
    au.src = url;
    recordingslist.appendChild(au);
  });
}

window.onload = function init() {
  try {
    // webkit shim
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
    window.URL = window.URL || window.webkitURL;

    audio_context = new AudioContext;
    __log('Audio context set up.');
    __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
  } catch (e) {
    alert('No web audio support in this browser!');
  }

  navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
    __log('No live audio input: ' + e);
  });
};
</script>

<script src="/js/recorder.js"></script>

